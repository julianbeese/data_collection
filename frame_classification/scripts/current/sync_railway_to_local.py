#!/usr/bin/env python3
"""
SYNC RAILWAY ZU LOKALER DUCKDB
Synchronisiert annotierte Daten von Railway zur√ºck in lokale DuckDB
"""

import duckdb
import psycopg2
from psycopg2.extras import RealDictCursor
import argparse
from pathlib import Path
import shutil
import os
from dotenv import load_dotenv

load_dotenv()

class RailwayToLocalSync:
    def __init__(self, local_duckdb_path: str, postgres_url: str):
        self.local_duckdb_path = local_duckdb_path
        self.postgres_url = postgres_url
        
    def sync_annotations_from_railway(self):
        """Synchronisiert Annotationen von Railway zur√ºck in lokale DuckDB"""
        print("üîÑ SYNC RAILWAY ZU LOKALER DUCKDB")
        print("=" * 50)
        
        # Pr√ºfe ob finale DB existiert
        final_db_path = self.local_duckdb_path.replace("debates_brexit_chunked", "debates_brexit_chunked_final")
        
        if not Path(final_db_path).exists():
            print(f"üìã Kopiere {self.local_duckdb_path} ‚Üí {final_db_path}")
            shutil.copy2(self.local_duckdb_path, final_db_path)
            print("‚úÖ Datenbank kopiert")
        else:
            print(f"‚úÖ Finale Datenbank existiert bereits: {final_db_path}")
        
        # PostgreSQL Verbindung zu Railway
        pg_conn = psycopg2.connect(self.postgres_url)
        pg_cursor = pg_conn.cursor(cursor_factory=RealDictCursor)
        
        # DuckDB Verbindung zur finalen DB
        duck_conn = duckdb.connect(final_db_path)
        
        try:
            # Hole annotierte Chunks von Railway
            print("üì• Lade annotierte Chunks von Railway...")
            pg_cursor.execute("""
                SELECT 
                    chunk_id, speech_id, debate_id, speaker_name, speaker_party,
                    debate_title, debate_date, chunk_text, chunk_index, total_chunks,
                    word_count, char_count, chunking_method, assigned_user,
                    frame_label, annotation_confidence, annotation_notes,
                    created_at, updated_at
                FROM chunks 
                WHERE assigned_user IS NOT NULL
                ORDER BY chunk_id
            """)
            
            railway_chunks = pg_cursor.fetchall()
            print(f"‚úÖ {len(railway_chunks):,} annotierte Chunks von Railway geladen")
            
            # Hole Agreement-Daten von Railway
            try:
                pg_cursor.execute("""
                    SELECT 
                        chunk_id, annotator1, annotator2, label1, label2,
                        agreement_score, agreement_perfect, created_at, updated_at
                    FROM agreement_chunks
                    ORDER BY chunk_id
                """)
                railway_agreements = pg_cursor.fetchall()
                print(f"‚úÖ {len(railway_agreements):,} Agreement-Daten von Railway geladen")
            except:
                railway_agreements = []
                print("‚ö†Ô∏è Keine Agreement-Daten auf Railway gefunden")
            
            # Aktualisiere lokale Chunks mit Railway-Daten
            print("üîÑ Aktualisiere lokale Chunks...")
            updated_chunks = 0
            
            for chunk in railway_chunks:
                # Aktualisiere Chunk mit Railway-Daten
                duck_conn.execute("""
                    UPDATE chunks SET
                        assigned_user = ?,
                        frame_label = ?,
                        annotation_confidence = ?,
                        annotation_notes = ?,
                        updated_at = ?
                    WHERE chunk_id = ?
                """, (
                    chunk['assigned_user'],
                    chunk['frame_label'],
                    chunk['annotation_confidence'],
                    chunk['annotation_notes'],
                    chunk['updated_at'],
                    chunk['chunk_id']
                ))
                updated_chunks += 1
            
            print(f"‚úÖ {updated_chunks:,} Chunks aktualisiert")
            
            # Synchronisiere Agreement-Daten
            if railway_agreements:
                print("üîÑ Synchronisiere Agreement-Daten...")
                
                # L√∂sche alte Agreement-Daten
                duck_conn.execute("DELETE FROM agreement_chunks")
                
                # F√ºge Railway Agreement-Daten ein
                for agreement in railway_agreements:
                    duck_conn.execute("""
                        INSERT INTO agreement_chunks (
                            chunk_id, annotator1, annotator2, label1, label2,
                            agreement_score, agreement_perfect, created_at, updated_at
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                    """, (
                        agreement['chunk_id'],
                        agreement['annotator1'],
                        agreement['annotator2'],
                        agreement['label1'],
                        agreement['label2'],
                        agreement['agreement_score'],
                        agreement['agreement_perfect'],
                        agreement['created_at'],
                        agreement['updated_at']
                    ))
                
                print(f"‚úÖ {len(railway_agreements):,} Agreement-Daten synchronisiert")
            
            # Statistiken
            self.print_sync_statistics(duck_conn)
            
            print("‚úÖ Synchronisation erfolgreich abgeschlossen!")
            print(f"üìÅ Finale Datenbank: {final_db_path}")
            
        except Exception as e:
            print(f"‚ùå Fehler bei Synchronisation: {e}")
            raise
        finally:
            pg_cursor.close()
            pg_conn.close()
            duck_conn.close()
    
    def print_sync_statistics(self, duck_conn):
        """Zeigt Synchronisations-Statistiken"""
        print("\nüìä SYNCHRONISATIONS-STATISTIKEN")
        print("=" * 40)
        
        # Gesamt-Chunks
        total_chunks = duck_conn.execute("SELECT COUNT(*) FROM chunks").fetchone()[0]
        
        # Annotierte Chunks
        annotated_chunks = duck_conn.execute("""
            SELECT COUNT(*) FROM chunks 
            WHERE assigned_user IS NOT NULL
        """).fetchone()[0]
        
        # Chunks mit Frame-Labels
        labeled_chunks = duck_conn.execute("""
            SELECT COUNT(*) FROM chunks 
            WHERE frame_label IS NOT NULL
        """).fetchone()[0]
        
        # Agreement-Chunks
        try:
            agreement_chunks = duck_conn.execute("SELECT COUNT(*) FROM agreement_chunks").fetchone()[0]
        except:
            agreement_chunks = 0
        
        # Annotatoren-Statistiken
        annotator_stats = duck_conn.execute("""
            SELECT assigned_user, COUNT(*) as count
            FROM chunks 
            WHERE assigned_user IS NOT NULL
            GROUP BY assigned_user
            ORDER BY count DESC
        """).fetchall()
        
        print(f"Gesamt Chunks:           {total_chunks:,}")
        print(f"Annotierte Chunks:        {annotated_chunks:,} ({annotated_chunks/total_chunks*100:.1f}%)")
        print(f"Chunks mit Frame-Labels:   {labeled_chunks:,} ({labeled_chunks/total_chunks*100:.1f}%)")
        print(f"Agreement-Chunks:         {agreement_chunks:,}")
        
        print(f"\nAnnotatoren-Statistiken:")
        for annotator, count in annotator_stats:
            print(f"  {annotator:15}: {count:6,} Chunks")
        
        # Frame-Label-Statistiken
        try:
            frame_stats = duck_conn.execute("""
                SELECT frame_label, COUNT(*) as count
                FROM chunks 
                WHERE frame_label IS NOT NULL
                GROUP BY frame_label
                ORDER BY count DESC
                LIMIT 10
            """).fetchall()
            
            if frame_stats:
                print(f"\nTop Frame-Labels:")
                for frame_label, count in frame_stats:
                    print(f"  {frame_label:20}: {count:6,} Chunks")
        except:
            pass

def main():
    parser = argparse.ArgumentParser(description='Sync Railway zu lokaler DuckDB')
    parser.add_argument('--duckdb', 
                       default='/Users/julianbeese/Developer/Master/data_collection/data/processed/debates_brexit_chunked.duckdb',
                       help='Pfad zur lokalen DuckDB-Datei')
    parser.add_argument('--postgres-url', help='PostgreSQL URL (optional, nutzt DATABASE_URL)')
    
    args = parser.parse_args()
    
    if not Path(args.duckdb).exists():
        print(f"‚ùå DuckDB-Datei {args.duckdb} nicht gefunden!")
        return
    
    postgres_url = args.postgres_url or os.getenv('DATABASE_URL')
    if not postgres_url:
        print("‚ùå PostgreSQL URL ben√∂tigt! Setze DATABASE_URL oder nutze --postgres-url")
        return
    
    syncer = RailwayToLocalSync(args.duckdb, postgres_url)
    syncer.sync_annotations_from_railway()

if __name__ == "__main__":
    main()
